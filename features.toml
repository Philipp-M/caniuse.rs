[unstable]

#[[unstable.features]]

[[versions]]
number = "1.42.0"
channel = "nightly"
gh_milestone_id = 69

[[versions]]
number = "1.41.0"
channel = "beta"
gh_milestone_id = 68

[[versions]]
number = "1.40.0"
blog_post = "https://blog.rust-lang.org/2019/12/19/Rust-1.40.0.html"
gh_milestone_id = 67

[[versions.features]]
title = "constructor functions in `const fn`"
kind = "lang"
flag = "const_constructor"

[[versions.features]]
title = "`#![non_exhaustive]`"
kind = "lang"
flag = "non_exhaustive"

[[versions.features]]
title = "macro invocations in `extern {}` blocks"
kind = "lang"
flag = "macros_in_extern"
stabilization_pr_id = 63931

[[versions.features]]
title = "function-like procedural macros in type position"
kind = "lang"
stabilization_pr_id = 63931

[[versions.features]]
title = "proc-macros that generate `macro_rules!` macros"
kind = "lang"
stabilization_pr_id = 64035

[[versions.features]]
title = "`meta` pattern matcher in `macro_rules!` for modern attribute syntax"
kind = "lang"
impl_pr_id = 63674

[[versions.features]]
title = "`#[cfg(doctest)]`"
kind = "lang"
flag = "cfg_doctest"

[[versions.features]]
title = "float ↔ bytes conversion"
flag = "float_to_from_bytes"
kind = "stdlib"
items = [
    "f32::to_ne_bytes", "f32::to_le_bytes", "f32::to_be_bytes",
    "f32::from_ne_bytes", "f32::from_le_bytes", "f32::from_be_bytes",

    "f64::to_ne_bytes", "f64::to_le_bytes", "f64::to_be_bytes",
    "f64::from_ne_bytes", "f64::from_le_bytes", "f64::from_be_bytes",
]

[[versions.features]]
title = "`is_power_of_two` as `const fn`"
kind = "stdlib"
impl_pr_id = 65092
items = [
    "u8::is_power_of_two",
    "u16::is_power_of_two",
    "u32::is_power_of_two",
    "u64::is_power_of_two",
    "u128::is_power_of_two",
    "usize::is_power_of_two",
]

[[versions.features]]
title = "`BTreeMap::get_key_value`"
kind = "stdlib"

[[versions.features]]
title = "`HashMap::get_key_value`"
kind = "stdlib"

[[versions.features]]
title = "`Option::as_deref_mut`"
kind = "stdlib"

[[versions.features]]
title = "`Option::as_deref`"
kind = "stdlib"

[[versions.features]]
title = "`Option::flatten`"
kind = "stdlib"

[[versions.features]]
title = "`UdpSocket::peer_addr`"
kind = "stdlib"

[[versions.features]]
title = "`mem::take`"
kind = "stdlib"

[[versions.features]]
title = "`slice::repeat`"
kind = "stdlib"

[[versions.features]]
title = "`todo!`"
kind = "stdlib"

[[versions]]
number = "1.39.0"
blog_post = "https://blog.rust-lang.org/2019/11/07/Rust-1.39.0.html"
gh_milestone_id = 66

[[versions.features]]
title = "async / .await"
flag = "async_await"
kind = "lang"
items = ["async fn", "async move { ... }", ".await"]

[[versions.features]]
title = "conditional compilation of function arguments"
kind = "lang"
stabilization_pr_id = 64010
items = ["#[cfg(...)]", "#[cfg_attr(...)]"]

[[versions.features]]
title = "lint control attributes on function arguments"
kind = "lang"
stabilization_pr_id = 64010
items = ["#[allow(...)]", "#[warn(...)]", "#[deny(...)]", "#[forbid(...)]"]

[[versions.features]]
title = "shared references to bind-by-move patterns in `match` arms' guards"
kind = "lang"
stabilization_pr_id = 63118

[[versions.features]]
title = "`Vec::new` as `const fn`"
kind = "stdlib"

[[versions.features]]
title = "`String::new` as `const fn`"
kind = "stdlib"

[[versions.features]]
title = "`LinkedList::new` as `const fn`"
kind = "stdlib"

[[versions.features]]
title = "`str::len` as `const fn`"
kind = "stdlib"

[[versions.features]]
title = "`[T]::len` as `const fn`"
kind = "stdlib"

[[versions.features]]
title = "`str::as_bytes` as `const fn`"
kind = "stdlib"

[[versions.features]]
title = "`Pin::into_inner`"
kind = "stdlib"

[[versions.features]]
title = "`Instant::checked_duration_since`"
kind = "stdlib"

[[versions.features]]
title = "`Instant::saturating_duration_since`"
kind = "stdlib"

[[versions]]
number = "1.38.0"
blog_post = "https://blog.rust-lang.org/2019/09/26/Rust-1.38.0.html"
gh_milestone_id = 65

[[versions.features]]
title = "#[global_allocator] inside submodules"
kind = "lang"
impl_pr_id = 62735

[[versions.features]]
title = "euclidean division & modulo"
flag = "euclidean_division"
kind = "stdlib"

[[versions]]
number = "1.37.0"
blog_post = "https://blog.rust-lang.org/2019/08/15/Rust-1.37.0.html"
gh_milestone_id = 64

[[versions.features]]
title = "`const _: TYPE = VALUE`"
flag = "underscore_const_names"
kind = "lang"

[[versions]]
number = "1.36.0"
blog_post = "https://blog.rust-lang.org/2019/07/04/Rust-1.36.0.html"
gh_milestone_id = 62

[[versions]]
number = "1.35.0"
blog_post = "https://blog.rust-lang.org/2019/05/23/Rust-1.35.0.html"
gh_milestone_id = 61

[[versions]]
number = "1.34.0"

[[versions.features]]
title = "`overflowing_neg` as `const fn`"
kind = "stdlib"
items = [
    "i8::overflowing_neg",
    "i16::overflowing_neg",
    "i32::overflowing_neg",
    "i64::overflowing_neg",
    "i128::overflowing_neg",
    "isize::overflowing_neg",
    "u8::overflowing_neg",
    "u16::overflowing_neg",
    "u32::overflowing_neg",
    "u64::overflowing_neg",
    "u128::overflowing_neg",
    "usize::overflowing_neg",
]

[[versions.features]]
title = "`wrapping_neg` as `const fn`"
kind = "stdlib"
items = [
    "i8::wrapping_neg",
    "i16::wrapping_neg",
    "i32::wrapping_neg",
    "i64::wrapping_neg",
    "i128::wrapping_neg",
    "isize::wrapping_neg",
    "u8::wrapping_neg",
    "u16::wrapping_neg",
    "u32::wrapping_neg",
    "u64::wrapping_neg",
    "u128::wrapping_neg",
    "usize::wrapping_neg",
]

[[versions]]
number = "1.32.0"

[[versions.features]]
title = "integer ↔ bytes conversion"
flag = "int_to_from_bytes"
kind = "stdlib"
items = [
    "i8::to_ne_bytes", "i8::to_le_bytes", "i8::to_be_bytes",
    "i8::from_ne_bytes", "i8::from_le_bytes", "i8::from_be_bytes",

    "i16::to_ne_bytes", "i16::to_le_bytes", "i16::to_be_bytes",
    "i16::from_ne_bytes", "i16::from_le_bytes", "i16::from_be_bytes",

    "i32::to_ne_bytes", "i32::to_le_bytes", "i32::to_be_bytes",
    "i32::from_ne_bytes", "i32::from_le_bytes", "i32::from_be_bytes",

    "i64::to_ne_bytes", "i64::to_le_bytes", "i64::to_be_bytes",
    "i64::from_ne_bytes", "i64::from_le_bytes", "i64::from_be_bytes",

    "i128::to_ne_bytes", "i128::to_le_bytes", "i128::to_be_bytes",
    "i128::from_ne_bytes", "i128::from_le_bytes", "i128::from_be_bytes",

    "isize::to_ne_bytes", "isize::to_le_bytes", "isize::to_be_bytes",
    "isize::from_ne_bytes", "isize::from_le_bytes", "isize::from_be_bytes",

    "u8::to_ne_bytes", "u8::to_le_bytes", "u8::to_be_bytes",
    "u8::from_ne_bytes", "u8::from_le_bytes", "u8::from_be_bytes",

    "u16::to_ne_bytes", "u16::to_le_bytes", "u16::to_be_bytes",
    "u16::from_ne_bytes", "u16::from_le_bytes", "u16::from_be_bytes",

    "u32::to_ne_bytes", "u32::to_le_bytes", "u32::to_be_bytes",
    "u32::from_ne_bytes", "u32::from_le_bytes", "u32::from_be_bytes",

    "u64::to_ne_bytes", "u64::to_le_bytes", "u64::to_be_bytes",
    "u64::from_ne_bytes", "u64::from_le_bytes", "u64::from_be_bytes",

    "u128::to_ne_bytes", "u128::to_le_bytes", "u128::to_be_bytes",
    "u128::from_ne_bytes", "u128::from_le_bytes", "u128::from_be_bytes",

    "usize::to_ne_bytes", "usize::to_le_bytes", "usize::to_be_bytes",
    "usize::from_ne_bytes", "usize::from_le_bytes", "usize::from_be_bytes",
]

[[versions]]
number = "1.26.0"

[[versions.features]]
title = "placeholder lifetimes (`'_`)"
flag = "underscore_lifetimes"
kind = "lang"

[[versions.features]]
title = "128 bit integer types"
flag = "i128_type"
kind = "lang"
items = ["i128", "u128"]

[[versions]]
number = "1.20.0"

[[versions.features]]
title = "the `compile_error!` macro"
flag = "compile_error"
kind = "stdlib"

[[versions]]
number = "1.6.0"

[[versions.features]]
title = "`#![no_std]`"
flag = "no_std"
kind = "lang"

[[versions]]
number = "1.0.0"

[[versions.features]]
title = "`if let` expressions"
flag = "if_let"
kind = "lang"

[[versions.features]]
title = "`while let` expressions"
flag = "while_let"
kind = "lang"
